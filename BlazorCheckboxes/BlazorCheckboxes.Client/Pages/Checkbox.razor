@page "/checkbox"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components

@rendermode InteractiveAuto

<PageTitle>Checkbox</PageTitle>

<h1>Checkbox</h1>

<button class="btn btn-primary" style="width: 100%;" @onclick="CheckAllCheckboxes">Check all checkboxes</button>
<button class="btn btn-secondary" style="width: 100%;" @onclick="UncheckAllCheckboxes">Uncheck all checkboxes</button>

@for (int i = 0; i < _checkboxStatuses.Count; i++)
{
    var checkboxKey = $"checkbox{i}";
    <input type="checkbox" id="@checkboxKey" name="@checkboxKey" value="@checkboxKey" checked="@_checkboxStatuses[checkboxKey]" @onchange="(e) => OnCheckboxChanged(checkboxKey, ((ChangeEventArgs)e).Value)">
}

@inject NavigationManager Navigation

@code {
    private Dictionary<string, bool> _checkboxStatuses = InitializeCheckboxStatuses(10000);
    private HubConnection? _hubConnection;

    private static Dictionary<string, bool> InitializeCheckboxStatuses(int count)
    {
        var statuses = new Dictionary<string, bool>();
        for (int i = 0; i < count; i++)
        {
            statuses.Add($"checkbox{i}", false);
        }
        return statuses;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                string? baseUri = Navigation.BaseUri;
                Uri? hubUrl = new Uri($"{baseUri}checkboxHub");
                _hubConnection = new HubConnectionBuilder().WithUrl(hubUrl.ToString()).Build();
                _hubConnection.On<Dictionary<string, bool>>("ReceiveMessage", HandleMessage);
                await _hubConnection.StartAsync();
                Console.WriteLine("Hub connection started.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error starting hub connection: {ex.Message}");
            }
        }
    }

    private async void HandleMessage(Dictionary<string, bool> checkboxStatuses)
    {
        try
        {
            _checkboxStatuses = checkboxStatuses;
            await InvokeAsync(StateHasChanged);
            Console.WriteLine("Received message: " + string.Join(", ", checkboxStatuses.Select(kv => $"{kv.Key}: {kv.Value}")));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling message: {ex.Message}");
        }
    }

    private async Task OnCheckboxChanged(string checkboxKey, object? value)
    {
        try
        {
            if (value is bool isChecked)
            {
                _checkboxStatuses[checkboxKey] = isChecked;
                if (_hubConnection != null)
                {
                    var update = new Dictionary<string, bool> { { checkboxKey, isChecked } };
                    await _hubConnection.SendAsync("SendMessage", update);
                    Console.WriteLine($"Sent message: {checkboxKey} = {isChecked}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error on checkbox change: {ex.Message}");
        }
    }

    private async Task CheckAllCheckboxes()
    {
        await CheckUncheckAllCheckboxes(true);
    }

    private async Task UncheckAllCheckboxes()
    {
        await CheckUncheckAllCheckboxes(false);
    }

    private async Task CheckUncheckAllCheckboxes(bool target)
    {
        try
        {
            if (_hubConnection == null)
            {
                return;
            }
            var updates = _checkboxStatuses.Keys.ToDictionary(key => key, key => target);
            _checkboxStatuses = updates;
            await _hubConnection.SendAsync("SendMessage", updates);
            await InvokeAsync(StateHasChanged);
            Console.WriteLine("Sent bulk update: " + string.Join(", ", updates.Select(kv => $"{kv.Key}: {kv.Value}")));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CheckUncheckAllCheckboxes: {ex.Message}");
        }
    }
}
